
It is important to note that query speed and time testing was conducted on a local copy of the database. This had a significantly different performance compared to the original database in the NCI environment. As such the recommendations are also based on theory.

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Find missing Indexes
--------------------------------------------------------------------------------------------------------------
Some were deleted with concerns about query planner optimisation/confusion. This stackoverflow answer seems to deem that concern unnecessary:
https://stackoverflow.com/questions/18507758/number-of-indexes-per-table

Based on what indexes currently exist, it was possible to identify missing indexes based on their metadata_type_ref and a count of indexes for each product.

<include table identifying missing indexes>

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Fix Missing Indexes
--------------------------------------------------------------------------------------------------------------
After identifying which indexes are missing, the product per metadata_type_ref with the most indexes are used as index templates to fill the missing indexes.

Note: whether an index is gist or btree is not visible when double-clicking the index in PyCharm, but is visible in pg_indexes

<refer to previous table to identify which indexes were used as templates>

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Min/max (Extent) indexes
--------------------------------------------------------------------------------------------------------------
8 new indexes on individual corner coordinates (upper left, upper right, lower left and lower right - latitudes and longitudes) significantly improves max/min query speeds on those columns.

<include query speed tests>

The new indexes had minimal impacts on insertion times.

<include insertion speed tests>

Required <insert memory size> more hard drive space to maintain.


Depending on the requirements of dea-dashboard and datacube-ows - these are the recommended indexes to implement:
???

•	Following on from min/max
    o	Produce queries that use the min/max indexes to replace functionality in dea-dashboard
    o	Produce queries that use the min/max indexes to replace functionality in datacube-ows Probably

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Research performance (and limitations) of the current dataset spatial and temporal search query

- index appears to slow down the query in some cases
--------------------------------------------------------------------------------------------------------------
Main current limitation is the retrieval of data from the JSON followed by the least or greatest function to identify the border conditions for each row. If new columns were added to dataset that contained the precomputed values that most queries refer to it should be possible to improve query speeds.

<include table indicating query time differences>

Need to identify the reasoning for so many partial indexes. Possible that query performance would not change if including dataset_type_ref as the first column of the index but would improve insertion or creation of new product.

•	Research performance (and limitations) of the current dataset spatial and temporal search query
    o	Write up the current limitations
    o	Propose a better querying methodology
really really simple Talk to Robbie (Armstrong) and/or Ashoka

•	Talk to Jeremy about potential problems with proposed improvements He did the initial implementation of the ODC database code, and has gone on to create cubedash/dea-dashboard, so is very familiar with the problem space.

The state of the database was only meant to be temporary but followup measures were never taken. Many of the current issues were foreseen and considered non-critical. Cubedash and dea-dashboard were pilot projects as well that's why they were not incorporated into ODC.


•	Review Slow queries from database logs
    o	Are there any common things we should improve.
•	Take another snapshot of index usage and compare


*** concerns ***
the new structure was faster for the slow queries - not sure about the impact on the already fast queries
- need to test queries that aren't slow




------
Either way, CLUSTER using the multicolumn index from above can help performance:

`CLUSTER ips USING index_ips_begin_end_ip_num;`

This way, candidates fulfilling your first condition are packed onto the same or adjacent data pages. Can help performance a lot with if you have lots of rows per value of the first column. Else it is hardly effective.

https://stackoverflow.com/questions/1251636/what-do-clustered-and-non-clustered-index-actually-mean?rq=1

"""
A clustered index means you are telling the database to store close values actually close to one another on the disk. This has the benefit of rapid scan / retrieval of records falling into some range of clustered index values.

For example, you have two tables, Customer and Order:

Customer
----------
ID
Name
Address

Order
----------
ID
CustomerID
Price

If you wish to quickly retrieve all orders of one particular customer, you may wish to create a clustered index on the "CustomerID" column of the Order table. This way the records with the same CustomerID will be physically stored close to each other on disk (clustered) which speeds up their retrieval.

P.S. The index on CustomerID will obviously be not unique, so you either need to add a second field to "uniquify" the index or let the database handle that for you but that's another story.

Regarding multiple indexes. You can have only one clustered index per table because this defines how the data is physically arranged. If you wish an analogy, imagine a big room with many tables in it. You can either put these tables to form several rows or pull them all together to form a big conference table, but not both ways at the same time. A table can have other indexes, they will then point to the entries in the clustered index which in its turn will finally say where to find the actual data.
"""